// <auto-generated/>
#pragma warning disable
using CoffeeShop.OrderSummary;
using Marten.Internal;
using Marten.Internal.Storage;
using Marten.Schema;
using Marten.Schema.Arguments;
using Npgsql;
using System;
using System.Collections.Generic;
using Weasel.Core;
using Weasel.Postgresql;

namespace Marten.Generated.DocumentStorage
{
    // START: UpsertOrderOperation684698426
    public class UpsertOrderOperation684698426 : Marten.Internal.Operations.StorageOperation<CoffeeShop.OrderSummary.Order, System.Guid>
    {
        private readonly CoffeeShop.OrderSummary.Order _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpsertOrderOperation684698426(CoffeeShop.OrderSummary.Order document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }


        public const string COMMAND_TEXT = "select order_summary.mt_upsert_order(?, ?, ?, ?)";


        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            if (postprocessRevision(reader, exceptions))
            {
            }

        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            if (await postprocessRevisionAsync(reader, exceptions, token))
            {
            }

        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Upsert;
        }


        public override string CommandText()
        {
            return COMMAND_TEXT;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Npgsql.NpgsqlParameter[] parameters, CoffeeShop.OrderSummary.Order document, Marten.Internal.IMartenSession session)
        {
            parameters[0].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            parameters[0].Value = session.Serializer.ToJson(_document);
            // .Net Class Type
            parameters[1].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            parameters[1].Value = _document.GetType().FullName;
            parameters[2].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Uuid;
            parameters[2].Value = document.Id;
            setCurrentRevisionParameter(parameters[3]);
        }

    }

    // END: UpsertOrderOperation684698426
    
    
    // START: InsertOrderOperation684698426
    public class InsertOrderOperation684698426 : Marten.Internal.Operations.StorageOperation<CoffeeShop.OrderSummary.Order, System.Guid>
    {
        private readonly CoffeeShop.OrderSummary.Order _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public InsertOrderOperation684698426(CoffeeShop.OrderSummary.Order document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }


        public const string COMMAND_TEXT = "select order_summary.mt_insert_order(?, ?, ?, ?)";


        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            if (postprocessRevision(reader, exceptions))
            {
            }

        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            if (await postprocessRevisionAsync(reader, exceptions, token))
            {
            }

        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Insert;
        }


        public override string CommandText()
        {
            return COMMAND_TEXT;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Npgsql.NpgsqlParameter[] parameters, CoffeeShop.OrderSummary.Order document, Marten.Internal.IMartenSession session)
        {
            parameters[0].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            parameters[0].Value = session.Serializer.ToJson(_document);
            // .Net Class Type
            parameters[1].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            parameters[1].Value = _document.GetType().FullName;
            parameters[2].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Uuid;
            parameters[2].Value = document.Id;
            setCurrentRevisionParameter(parameters[3]);
        }

    }

    // END: InsertOrderOperation684698426
    
    
    // START: UpdateOrderOperation684698426
    public class UpdateOrderOperation684698426 : Marten.Internal.Operations.StorageOperation<CoffeeShop.OrderSummary.Order, System.Guid>
    {
        private readonly CoffeeShop.OrderSummary.Order _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpdateOrderOperation684698426(CoffeeShop.OrderSummary.Order document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }


        public const string COMMAND_TEXT = "select order_summary.mt_update_order(?, ?, ?, ?)";


        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            if (postprocessRevision(reader, exceptions))
            {
            }

        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            if (await postprocessRevisionAsync(reader, exceptions, token))
            {
            }

        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Update;
        }


        public override string CommandText()
        {
            return COMMAND_TEXT;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Npgsql.NpgsqlParameter[] parameters, CoffeeShop.OrderSummary.Order document, Marten.Internal.IMartenSession session)
        {
            parameters[0].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            parameters[0].Value = session.Serializer.ToJson(_document);
            // .Net Class Type
            parameters[1].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            parameters[1].Value = _document.GetType().FullName;
            parameters[2].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Uuid;
            parameters[2].Value = document.Id;
            setCurrentRevisionParameter(parameters[3]);
        }

    }

    // END: UpdateOrderOperation684698426
    
    
    // START: QueryOnlyOrderSelector684698426
    public class QueryOnlyOrderSelector684698426 : Marten.Internal.CodeGeneration.DocumentSelectorWithOnlySerializer, Marten.Linq.Selectors.ISelector<CoffeeShop.OrderSummary.Order>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public QueryOnlyOrderSelector684698426(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public CoffeeShop.OrderSummary.Order Resolve(System.Data.Common.DbDataReader reader)
        {

            CoffeeShop.OrderSummary.Order document;
            document = _serializer.FromJson<CoffeeShop.OrderSummary.Order>(reader, 0);
            return document;
        }


        public async System.Threading.Tasks.Task<CoffeeShop.OrderSummary.Order> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {

            CoffeeShop.OrderSummary.Order document;
            document = await _serializer.FromJsonAsync<CoffeeShop.OrderSummary.Order>(reader, 0, token).ConfigureAwait(false);
            return document;
        }

    }

    // END: QueryOnlyOrderSelector684698426
    
    
    // START: LightweightOrderSelector684698426
    public class LightweightOrderSelector684698426 : Marten.Internal.CodeGeneration.DocumentSelectorWithOnlySerializer, Marten.Linq.Selectors.ISelector<CoffeeShop.OrderSummary.Order>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public LightweightOrderSelector684698426(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public CoffeeShop.OrderSummary.Order Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<System.Guid>(0);

            CoffeeShop.OrderSummary.Order document;
            document = _serializer.FromJson<CoffeeShop.OrderSummary.Order>(reader, 1);
            var version = reader.GetFieldValue<int>(2);
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }


        public async System.Threading.Tasks.Task<CoffeeShop.OrderSummary.Order> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<System.Guid>(0, token);

            CoffeeShop.OrderSummary.Order document;
            document = await _serializer.FromJsonAsync<CoffeeShop.OrderSummary.Order>(reader, 1, token).ConfigureAwait(false);
            var version = await reader.GetFieldValueAsync<int>(2, token);
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }

    }

    // END: LightweightOrderSelector684698426
    
    
    // START: IdentityMapOrderSelector684698426
    public class IdentityMapOrderSelector684698426 : Marten.Internal.CodeGeneration.DocumentSelectorWithIdentityMap<CoffeeShop.OrderSummary.Order, System.Guid>, Marten.Linq.Selectors.ISelector<CoffeeShop.OrderSummary.Order>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public IdentityMapOrderSelector684698426(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public CoffeeShop.OrderSummary.Order Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<System.Guid>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            CoffeeShop.OrderSummary.Order document;
            document = _serializer.FromJson<CoffeeShop.OrderSummary.Order>(reader, 1);
            var version = reader.GetFieldValue<int>(2);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }


        public async System.Threading.Tasks.Task<CoffeeShop.OrderSummary.Order> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<System.Guid>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            CoffeeShop.OrderSummary.Order document;
            document = await _serializer.FromJsonAsync<CoffeeShop.OrderSummary.Order>(reader, 1, token).ConfigureAwait(false);
            var version = await reader.GetFieldValueAsync<int>(2, token);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }

    }

    // END: IdentityMapOrderSelector684698426
    
    
    // START: DirtyTrackingOrderSelector684698426
    public class DirtyTrackingOrderSelector684698426 : Marten.Internal.CodeGeneration.DocumentSelectorWithDirtyChecking<CoffeeShop.OrderSummary.Order, System.Guid>, Marten.Linq.Selectors.ISelector<CoffeeShop.OrderSummary.Order>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public DirtyTrackingOrderSelector684698426(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public CoffeeShop.OrderSummary.Order Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<System.Guid>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            CoffeeShop.OrderSummary.Order document;
            document = _serializer.FromJson<CoffeeShop.OrderSummary.Order>(reader, 1);
            var version = reader.GetFieldValue<int>(2);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }


        public async System.Threading.Tasks.Task<CoffeeShop.OrderSummary.Order> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<System.Guid>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            CoffeeShop.OrderSummary.Order document;
            document = await _serializer.FromJsonAsync<CoffeeShop.OrderSummary.Order>(reader, 1, token).ConfigureAwait(false);
            var version = await reader.GetFieldValueAsync<int>(2, token);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }

    }

    // END: DirtyTrackingOrderSelector684698426
    
    
    // START: OverwriteOrderOperation684698426
    public class OverwriteOrderOperation684698426 : Marten.Internal.Operations.StorageOperation<CoffeeShop.OrderSummary.Order, System.Guid>
    {
        private readonly CoffeeShop.OrderSummary.Order _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public OverwriteOrderOperation684698426(CoffeeShop.OrderSummary.Order document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }


        public const string COMMAND_TEXT = "select order_summary.mt_overwrite_order(?, ?, ?, ?)";


        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            if (postprocessRevision(reader, exceptions))
            {
            }

        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            if (await postprocessRevisionAsync(reader, exceptions, token))
            {
            }

        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Update;
        }


        public override string CommandText()
        {
            return COMMAND_TEXT;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Npgsql.NpgsqlParameter[] parameters, CoffeeShop.OrderSummary.Order document, Marten.Internal.IMartenSession session)
        {
            parameters[0].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            parameters[0].Value = session.Serializer.ToJson(_document);
            // .Net Class Type
            parameters[1].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            parameters[1].Value = _document.GetType().FullName;
            parameters[2].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Uuid;
            parameters[2].Value = document.Id;
            setCurrentRevisionParameter(parameters[3]);
        }

    }

    // END: OverwriteOrderOperation684698426
    
    
    // START: QueryOnlyOrderDocumentStorage684698426
    public class QueryOnlyOrderDocumentStorage684698426 : Marten.Internal.Storage.QueryOnlyDocumentStorage<CoffeeShop.OrderSummary.Order, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public QueryOnlyOrderDocumentStorage684698426(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(CoffeeShop.OrderSummary.Order document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(CoffeeShop.OrderSummary.Order document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteOrderOperation684698426
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpdateOrderOperation684698426
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Insert(CoffeeShop.OrderSummary.Order document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertOrderOperation684698426
            (
                document, Identity(document),
                null,
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(CoffeeShop.OrderSummary.Order document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteOrderOperation684698426
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpsertOrderOperation684698426
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(CoffeeShop.OrderSummary.Order document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.OverwriteOrderOperation684698426
            (
                document, Identity(document),
                null,
                _document
                
            );

            return new Marten.Generated.DocumentStorage.OverwriteOrderOperation684698426
            (
                document, Identity(document),
                null,
                _document
                
            );
        }


        public override System.Guid Identity(CoffeeShop.OrderSummary.Order document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.QueryOnlyOrderSelector684698426(session, _document);
        }

    }

    // END: QueryOnlyOrderDocumentStorage684698426
    
    
    // START: LightweightOrderDocumentStorage684698426
    public class LightweightOrderDocumentStorage684698426 : Marten.Internal.Storage.LightweightDocumentStorage<CoffeeShop.OrderSummary.Order, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public LightweightOrderDocumentStorage684698426(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(CoffeeShop.OrderSummary.Order document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(CoffeeShop.OrderSummary.Order document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteOrderOperation684698426
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpdateOrderOperation684698426
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Insert(CoffeeShop.OrderSummary.Order document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertOrderOperation684698426
            (
                document, Identity(document),
                null,
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(CoffeeShop.OrderSummary.Order document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteOrderOperation684698426
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpsertOrderOperation684698426
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(CoffeeShop.OrderSummary.Order document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.OverwriteOrderOperation684698426
            (
                document, Identity(document),
                null,
                _document
                
            );

            return new Marten.Generated.DocumentStorage.OverwriteOrderOperation684698426
            (
                document, Identity(document),
                null,
                _document
                
            );
        }


        public override System.Guid Identity(CoffeeShop.OrderSummary.Order document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.LightweightOrderSelector684698426(session, _document);
        }

    }

    // END: LightweightOrderDocumentStorage684698426
    
    
    // START: IdentityMapOrderDocumentStorage684698426
    public class IdentityMapOrderDocumentStorage684698426 : Marten.Internal.Storage.IdentityMapDocumentStorage<CoffeeShop.OrderSummary.Order, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public IdentityMapOrderDocumentStorage684698426(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(CoffeeShop.OrderSummary.Order document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(CoffeeShop.OrderSummary.Order document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteOrderOperation684698426
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpdateOrderOperation684698426
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Insert(CoffeeShop.OrderSummary.Order document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertOrderOperation684698426
            (
                document, Identity(document),
                null,
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(CoffeeShop.OrderSummary.Order document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteOrderOperation684698426
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpsertOrderOperation684698426
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(CoffeeShop.OrderSummary.Order document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.OverwriteOrderOperation684698426
            (
                document, Identity(document),
                null,
                _document
                
            );

            return new Marten.Generated.DocumentStorage.OverwriteOrderOperation684698426
            (
                document, Identity(document),
                null,
                _document
                
            );
        }


        public override System.Guid Identity(CoffeeShop.OrderSummary.Order document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.IdentityMapOrderSelector684698426(session, _document);
        }

    }

    // END: IdentityMapOrderDocumentStorage684698426
    
    
    // START: DirtyTrackingOrderDocumentStorage684698426
    public class DirtyTrackingOrderDocumentStorage684698426 : Marten.Internal.Storage.DirtyCheckedDocumentStorage<CoffeeShop.OrderSummary.Order, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public DirtyTrackingOrderDocumentStorage684698426(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(CoffeeShop.OrderSummary.Order document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(CoffeeShop.OrderSummary.Order document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteOrderOperation684698426
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpdateOrderOperation684698426
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Insert(CoffeeShop.OrderSummary.Order document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertOrderOperation684698426
            (
                document, Identity(document),
                null,
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(CoffeeShop.OrderSummary.Order document, Marten.Internal.IMartenSession session, string tenant)
        {
            if (session.Concurrency == Marten.Services.ConcurrencyChecks.Disabled)
            {

                return new Marten.Generated.DocumentStorage.OverwriteOrderOperation684698426
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

            else
            {

                return new Marten.Generated.DocumentStorage.UpsertOrderOperation684698426
                (
                    document, Identity(document),
                    null,
                    _document
                    
                );
            }

        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(CoffeeShop.OrderSummary.Order document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.OverwriteOrderOperation684698426
            (
                document, Identity(document),
                null,
                _document
                
            );

            return new Marten.Generated.DocumentStorage.OverwriteOrderOperation684698426
            (
                document, Identity(document),
                null,
                _document
                
            );
        }


        public override System.Guid Identity(CoffeeShop.OrderSummary.Order document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.DirtyTrackingOrderSelector684698426(session, _document);
        }

    }

    // END: DirtyTrackingOrderDocumentStorage684698426
    
    
    // START: OrderBulkLoader684698426
    public class OrderBulkLoader684698426 : Marten.Internal.CodeGeneration.BulkLoader<CoffeeShop.OrderSummary.Order, System.Guid>
    {
        private readonly Marten.Internal.Storage.IDocumentStorage<CoffeeShop.OrderSummary.Order, System.Guid> _storage;

        public OrderBulkLoader684698426(Marten.Internal.Storage.IDocumentStorage<CoffeeShop.OrderSummary.Order, System.Guid> storage) : base(storage)
        {
            _storage = storage;
        }


        public const string MAIN_LOADER_SQL = "COPY order_summary.mt_doc_order(\"mt_dotnet_type\", \"id\", \"mt_version\", \"data\") FROM STDIN BINARY";

        public const string TEMP_LOADER_SQL = "COPY mt_doc_order_temp(\"mt_dotnet_type\", \"id\", \"mt_version\", \"data\") FROM STDIN BINARY";

        public const string COPY_NEW_DOCUMENTS_SQL = "insert into order_summary.mt_doc_order (\"id\", \"data\", \"mt_dotnet_type\", \"mt_version\", mt_last_modified) (select mt_doc_order_temp.\"id\", mt_doc_order_temp.\"data\", mt_doc_order_temp.\"mt_dotnet_type\", mt_doc_order_temp.\"mt_version\", transaction_timestamp() from mt_doc_order_temp left join order_summary.mt_doc_order on mt_doc_order_temp.id = order_summary.mt_doc_order.id where order_summary.mt_doc_order.id is null)";

        public const string OVERWRITE_SQL = "update order_summary.mt_doc_order target SET data = source.data, mt_dotnet_type = source.mt_dotnet_type, mt_version = source.mt_version, mt_last_modified = transaction_timestamp() FROM mt_doc_order_temp source WHERE source.id = target.id";

        public const string CREATE_TEMP_TABLE_FOR_COPYING_SQL = "create temporary table mt_doc_order_temp as select * from order_summary.mt_doc_order limit 0";


        public override string CreateTempTableForCopying()
        {
            return CREATE_TEMP_TABLE_FOR_COPYING_SQL;
        }


        public override string CopyNewDocumentsFromTempTable()
        {
            return COPY_NEW_DOCUMENTS_SQL;
        }


        public override string OverwriteDuplicatesFromTempTable()
        {
            return OVERWRITE_SQL;
        }


        public override void LoadRow(Npgsql.NpgsqlBinaryImporter writer, CoffeeShop.OrderSummary.Order document, Marten.Storage.Tenant tenant, Marten.ISerializer serializer)
        {
            writer.Write(document.GetType().FullName, NpgsqlTypes.NpgsqlDbType.Varchar);
            writer.Write(document.Id, NpgsqlTypes.NpgsqlDbType.Uuid);
            writer.Write(1, NpgsqlTypes.NpgsqlDbType.Integer);
            writer.Write(serializer.ToJson(document), NpgsqlTypes.NpgsqlDbType.Jsonb);
        }


        public override async System.Threading.Tasks.Task LoadRowAsync(Npgsql.NpgsqlBinaryImporter writer, CoffeeShop.OrderSummary.Order document, Marten.Storage.Tenant tenant, Marten.ISerializer serializer, System.Threading.CancellationToken cancellation)
        {
            await writer.WriteAsync(document.GetType().FullName, NpgsqlTypes.NpgsqlDbType.Varchar, cancellation);
            await writer.WriteAsync(document.Id, NpgsqlTypes.NpgsqlDbType.Uuid, cancellation);
            await writer.WriteAsync(1, NpgsqlTypes.NpgsqlDbType.Integer, cancellation);
            await writer.WriteAsync(serializer.ToJson(document), NpgsqlTypes.NpgsqlDbType.Jsonb, cancellation);
        }


        public override string MainLoaderSql()
        {
            return MAIN_LOADER_SQL;
        }


        public override string TempLoaderSql()
        {
            return TEMP_LOADER_SQL;
        }

    }

    // END: OrderBulkLoader684698426
    
    
    // START: OrderProvider684698426
    public class OrderProvider684698426 : Marten.Internal.Storage.DocumentProvider<CoffeeShop.OrderSummary.Order>
    {
        private readonly Marten.Schema.DocumentMapping _mapping;

        public OrderProvider684698426(Marten.Schema.DocumentMapping mapping) : base(new OrderBulkLoader684698426(new QueryOnlyOrderDocumentStorage684698426(mapping)), new QueryOnlyOrderDocumentStorage684698426(mapping), new LightweightOrderDocumentStorage684698426(mapping), new IdentityMapOrderDocumentStorage684698426(mapping), new DirtyTrackingOrderDocumentStorage684698426(mapping))
        {
            _mapping = mapping;
        }


    }

    // END: OrderProvider684698426
    
    
}

